NoOp {
name Curve_Creator
help "Curve Creator\n\nCréateur de courbes procédurales avec des paramétres pour chaque type de courbes."
knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() in ('CurveType', 'showPanel'):\n    mode = node\['CurveType'].value()\n    if mode == 'Sinusoidal':\n        node\['CurveCreator'].setExpression ('(((sin(((frame*(pi*2/(Frequency/2))/2)-(Offset+1.5)))+1)/2) * (MaxVal-MinVal) ) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Sinusoidal')\n        \n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n\n        \n        \n    elif mode == 'Triangle':\n        \n        node\['CurveCreator'].setExpression ('(((((2*asin(sin(2*pi*(frame/Frequency)+Offset)))/pi) / 2)+0.5) * (MaxVal-MinVal) ) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Triangle')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n\n    elif mode == 'Square':\n        \n        node\['CurveCreator'].setExpression ('((((sin(((frame*(pi*2/(Frequency))/2)-Offset))+1)/2) * (MaxVal-MinVal) ) + MinVal) > ((MaxVal/2)+(MinVal/2)) ? MaxVal : MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Square')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n    elif mode == 'Bounce':\n        \n        node\['CurveCreator'].setExpression ('((sin(((frame/Frequency)*pi)-Offset)>0?sin(((frame/Frequency)*pi)-Offset):cos((((frame/Frequency)*pi)-Offset)+(pi/2))) * (MaxVal-MinVal) ) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Bounce')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n    elif mode == 'Random':\n        \n        node\['CurveCreator'].setExpression ('((random((frame/Frequency)-Offset)) * (MaxVal-MinVal) ) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Random')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(True)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n        \n    elif mode == 'Noise':\n        \n        node\['CurveCreator'].setExpression ('((1*(noise((frame/Frequency)-Offset))+1 ) /2 ) * (MaxVal-MinVal) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Noise')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(True)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n        \n    elif mode == 'fBm':\n        \n        node\['CurveCreator'].setExpression ('(((((fBm(((frame)-Offset)*(1/(Frequency)),2.10,3.5,Octave,2,.5))+.5)))*(MaxVal-MinVal)) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">fBm')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(True)\n        node\['Octave'].setVisible(True)\n        node\['BlipTime'].setVisible(False)\n        \n\n    elif mode == 'SawTooth':\n        \n        node\['CurveCreator'].setExpression ('((1/Frequency)*(((frame)-Offset) % Frequency) * ((MaxVal-MinVal) ) + MinVal)')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">SawTooth')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n        \n    elif mode == 'SawTooth Wave':\n        \n        node\['CurveCreator'].setExpression ('Reverse ? cos((pi*(frame-Offset)/(2*Frequency)) % (pi/2)) * (MaxVal-MinVal) + MinVal : sin((pi*(frame-Offset)/(2*Frequency)) % (pi/2)) * (MaxVal-MinVal) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">SawTooth Wave')\n\n        node\['Reverse'].setVisible(True)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n        \n    elif mode == 'SawTooth Exponential':\n        \n        node\['CurveCreator'].setExpression ('(exp(2*pi*((frame-Offset) % Frequency)/Frequency)-1)/exp(2*pi) * (MaxVal-MinVal) + MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">SawTooth Exponential')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(False)\n        \n        \n    elif mode == 'Blip':\n        \n        node\['CurveCreator'].setExpression ('((frame+(-Offset+Frequency)) % (Frequency+BlipTime)/(Frequency)) *(Frequency/BlipTime) - (Frequency/BlipTime) >= 0 ? MaxVal : MinVal')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Blip')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(True)\n        \n        \n    elif mode == 'Sinusoidal Blip':\n        \n        node\['CurveCreator'].setExpression ('((int((frame-Offset) % Frequency)) >= 0 ? ((int((frame-Offset) % Frequency)) <= (0+(BlipTime-1)) ? ((sin(pi*((frame-Offset) % Frequency)/BlipTime)/2+1/2) * (2*MaxVal-2*MinVal) + (2*MinVal-MaxVal)) : MinVal)  : MinVal)')\n        node\['CurveCreator'].setLabel ('<font size = 4 color=\"orange\">Sinusoidal Blip')\n\n        node\['Reverse'].setVisible(False)\n        node\['Random'].setVisible(False)\n        node\['Octave'].setVisible(False)\n        node\['BlipTime'].setVisible(True)\n        \n        \nif knob.name() in ('ShowValue', 'showPanel'):\n    mode = node\['ShowValue'].value()\n    if mode == 0 :\n        node\['output'].setValue('\[value CurveType]')\n        \n    elif mode == 1:\n        node\['output'].setValue('\[value CurveType] : \[value CurveCreator]')\n"
tile_color 0xc4b566ff
selected true
hide_input true
addUserKnob {20 CCreatorTAB l "Curve Creator"}
addUserKnob {4 CurveType l "Curve type" M {Sinusoidal Triangle Square Bounce Random Noise fBm SawTooth "SawTooth Wave" "SawTooth Exponential" Blip "Sinusoidal Blip" ""}}
CurveType Noise
addUserKnob {6 ShowValue l "Show Value" -STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {7 CurveCreator l "<font size = 4 color=\"orange\">Noise"}
CurveCreator {{"((1*(noise((frame/Frequency)-Offset))+1 ) /2 ) * (MaxVal-MinVal) + MinVal"}}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {26 Settings}
addUserKnob {7 Frequency R 0 50}
Frequency 9
addUserKnob {6 Reverse -STARTLINE +HIDDEN}
addUserKnob {7 Offset R 0 100}
addUserKnob {22 Random -STARTLINE T "import random\nnuke.thisNode().knob('Offset').setValue( random.randint(1,16384) )"}
addUserKnob {7 MaxVal l "Max Value"}
MaxVal 1
addUserKnob {7 MinVal l "Min Value"}
addUserKnob {7 Octave +HIDDEN R 0 20}
Octave 10
addUserKnob {7 BlipTime l "Blip Time" +HIDDEN R 0 50}
BlipTime 5
addUserKnob {26 ""}
addUserKnob {20 endGroup n -1}
addUserKnob {1 output l INVISIBLE +INVISIBLE}
output "\[value CurveType]"
}
