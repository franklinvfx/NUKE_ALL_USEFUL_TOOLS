Dot {
 name Dot_Link
 help "Dot avec une connection automatique.\n\nLe node passe en rouge quand le input est masqu√© \"hide input\".\n\n\nRapel de raccourci Nuke:\n\nHide input: alt + H\n"
 onCreate "if not nuke.thisNode().knob('created_1').value():\n    nuke.thisNode().showControlPanel()\n    nuke.thisNode().knob('created_1').setValue(True)\n    nuke.thisNode().knob('applyPresets').setValue(True)"
 knobChanged "listenedKnobs = \['input_node_2', 'selected', 'inputChange']\n\nif nuke.thisKnob().name() in listenedKnobs:\n    baseLabel = 'Link to: <font size = 3 color=\"green\">'\n    nothingLabel = 'Link to: <font size = 3 color=\"red\">Nothing'\n\n    def tryConnectDot():\n        nodes = \[node.name() for node in nuke.allNodes()]\n        inputName = nuke.thisNode().knob('input_node_2').value()\n\n        if inputName in nodes:\n            if nuke.thisNode().input(0) is None or inputName != nuke.thisNode().input(0).name():\n                nuke.thisNode().setInput(0, None)\n                nuke.thisNode().setInput(0, nuke.toNode(inputName))\n                nuke.thisNode().knob('label').setValue(baseLabel+inputName)\n        else:\n            if nuke.thisNode().input(0) is not None:\n                nuke.thisNode().setInput(0, None)\n                nuke.thisNode().knob('label').setValue(nothingLabel)\n    tryConnectDot()\n\nelif nuke.thisKnob().name() == 'hide_input':\n    if nuke.thisNode().knob('hide_input').value() == False:  # if we unhide\n        nuke.thisNode()\['tile_color'].setValue(nuke.thisNode()\['gl_color'].value())\n    else:  # if we hide\n        nuke.thisNode()\['gl_color'].setValue(nuke.thisNode()\['tile_color'].value())\n        nuke.thisNode()\['tile_color'].setValue(3507945727)\n\nelif nuke.thisKnob().name() == 'convert':\n    newPostage = nuke.createNode('PostageStamp')\n    canSet = newPostage.canSetInput(0, nuke.thisNode().input(0))\n    nuke.delete(newPostage)\n\n    if canSet:\n        saveX = nuke.thisNode().xpos()\n        saveY = nuke.thisNode().ypos()\n        nuke.thisNode().selectOnly()\n    \n        # Create a node to save output connections\n        nodeTemp = nuke.createNode('Dot')\n        nuke.thisNode().selectOnly()\n        \n        path = nukescripts.getNukeUserFolder() + '/tmp.nk'\n        nuke.nodeCopy(path)\n        nuke.delete(nuke.thisNode())\n        \n        with open(path, 'r') as f:\n            content = f.read()\n    \n        content = content.split('\\n')\n    \n        for index, line in enumerate(content):\n            if 'Dot \{' in line:\n                content\[index] = line.replace('Dot \{', 'PostageStamp \{')\n    \n            elif 'PostageStamp \{' in line:\n                content\[index] = line.replace('PostageStamp \{', 'Dot \{')\n    \n            elif 'name Post_Link' in line and 'line.replace' not in line:\n                content\[index] = line.replace('name Post_Link', 'name Dot_Link')\n    \n            elif 'name Dot_Link' in line and 'line.replace' not in line:\n                content\[index] = line.replace('name Dot_Link', 'name Post_Link')\n    \n            elif 'postage_stamp true' in line and 'line.replace' not in line:\n                content\[index] = line.replace('postage_stamp true', '')\n    \n            elif 'cached true' in line and 'line.replace' not in line:\n                content\[index] = line.replace('cached true', '')\n    \n            elif 'disable true' in line and 'line.replace' not in line:\n                content\[index] = line.replace('disable true', '')\n    \n            elif 'dope_sheet true' in line and 'line.replace' not in line:\n                content\[index] = line.replace('dope_sheet true', '')\n    \n            elif 'bookmark true' in line and 'line.replace' not in line:\n                content\[index] = line.replace('bookmark true', '')\n    \n        content = '\\n'.join(content)\n    \n        with open(path, 'w') as f:\n            f.write(content)\n        \n        node = nuke.nodePaste(path)\n        if node.knob('convert').value():\n            node.setXYpos(saveX-34, saveY)\n            node.knob('postage_stamp').setValue(True)\n        else:\n            node.setXYpos(saveX+34, saveY)\n    \n        nodeTemp.setInput(0, node)\n        nuke.delete(nodeTemp)\n    \n        node.setInput(0, nuke.toNode(node.knob('input_node_2').value()))\n        node.setSelected(False)\n        node.showControlPanel()\n    \n        import os\n        os.remove(path)\n    else:\n        nuke.message('Cannot connect a postage stamp to this node')\n        nuke.thisNode().knob('convert').setValue(False)\n        # Add the flag KNOB_CHANGED_ALWAYS\n        nuke.thisNode().knob('convert').setFlag(0x00010000)\n\nelif nuke.thisKnob().name() == 'applyPresets':\n    savePresets = nuke.thisNode().knob('savePresets').value()\n    applyPresets = nuke.thisNode().knob('applyPresets').value()\n    nuke.thisNode().knob('btname').setValue('')\n\n    if savePresets != '' and applyPresets:\n        knobsToDelete = \[knob for knob in nuke.thisNode().allKnobs() if 'n_' in knob.name()]\n        for knob in knobsToDelete:\n            nuke.thisNode().removeKnob(knob)\n\n        knobsToAdd = savePresets.split(',')\n        knobsToAdd.pop(-1)\n        for knobT in knobsToAdd:\n            nametext = knobT.split('_')\[-1]\n            nameknob = knobT\n\n            kn = nuke.nuke.PyScript_Knob(nameknob, nametext, \"nuke.thisNode().knob('input_node_2').setValue(\\'\"+nametext+\"\\')\")\n            countCustoms = len(\[knob for knob in nuke.thisNode().allKnobs() if 'n_' in knob.name()])\n            if countCustoms % 3 == 0:\n                kn.setFlag(nuke.STARTLINE)\n            nuke.thisNode().addKnob(kn)\n            \nif nuke.thisKnob().name() == 'input_node_2':\n    v = nuke.thisNode().knob('input_node_2').value()\n    nuke.thisNode().knob('btname').setValue(v)\n    "
 label "Link to: <font size = 3 color=\"red\">Nothing"
 note_font_color 0x595959ff
 selected false
 addUserKnob {20 FTDOT l "Dot Link"}
 addUserKnob {1 input_node_2 l "<font color=\"green\">@b;Input name" t "The Dot is going to be link with this node."}
 input_node_2 Master
 addUserKnob {22 python l INVISIBLE t "If it's not automatically done so use this button to reconnect the Dot to the input Node." -STARTLINE +INVISIBLE T "def getNode(nodeName):\n nodeToConnect = None\n for node in nuke.allNodes(): \n  if node.name() == nodeName: \n   return node \n\nnuke.thisNode().setInput(0,getNode(nuke.thisNode()\['input_node_2'].value()  ))"}
 addUserKnob {22 addpreset l Add -STARTLINE T "node = nuke.thisNode()\nnametext = node.knob(\"btname\").getValue()\nnameknob = 'n_'+ nametext\n\nknobs = \[knob.name() for knob in nuke.thisNode().allKnobs()]\nif nameknob in knobs:\n    nuke.message('This preset already exist!')\n    nuke.thisNode().knob('input_node_2').setValue(nametext)\n\nelse:\n    presets = node.knob('savePresets').value()\n    node.knob('savePresets').setValue(presets + nameknob + ',')\n\n    kn = nuke.nuke.PyScript_Knob(nameknob, nametext, \"nuke.thisNode().knob('input_node_2').setValue(\\'\"+nametext+\"\\') \\nnuke.thisNode().knob('btname').setValue(\\'\"+nametext+\"\\')\")\n    countCustoms = len(\[knob for knob in nuke.thisNode().allKnobs() if 'n_' in knob.name()])\n    if countCustoms % 6 == 0:\n        kn.setFlag(nuke.STARTLINE)\n    nuke.thisNode().addKnob(kn)\n    kn.execute()"}
 addUserKnob {22 removepreset l Remove -STARTLINE T "node = nuke.thisNode()\nnametext = node.knob(\"btname\").getValue()\nnameknob = 'n_'+ nametext\nsavePresets = node.knob('savePresets').value()\nsavePresets = savePresets.replace(nameknob + ',', '')\n\nnode.removeKnob(node.knob(nameknob))\nnode.knob('savePresets').setValue(savePresets)"}
 addUserKnob {41 hide_input_1 l "Hide Input" T hide_input}
 hide_input true
 addUserKnob {6 convert l "Postage Stamp" t "Display a small image on this node in Node Graph indicating its input." -STARTLINE}
 addUserKnob {1 savePresets l INVISIBLE +INVISIBLE}
 savePresets n_Master,n_Master_Undisto,n_Master_Denoise,n_Roto,n_Key,n_Matte,n_Camera,n_Format_Undisto,n_CG,
 addUserKnob {1 btname l INVISIBLE +INVISIBLE}
 btname Master
 addUserKnob {6 applyPresets l INVISIBLE +INVISIBLE +STARTLINE}
 applyPresets true
 addUserKnob {6 created_1 l INVISIBLE -STARTLINE +INVISIBLE}
 created_1 false
 addUserKnob {26 FT1 l " " T " "}
 addUserKnob {26 FT2 l " " T "                                                                                               "}
 addUserKnob {26 FTools l " " t "FranklinVFX.com\n" -STARTLINE T "<font color=\"#1C1C1C\"> Franklin VFX - 2018"}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {22 n_Master l Master -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Master') \nnuke.thisNode().knob('btname').setValue('Master')"}
 addUserKnob {22 n_Master_Undisto l Master_Undisto -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Master_Undisto') \nnuke.thisNode().knob('btname').setValue('Master_Undisto')"}
 addUserKnob {22 n_Master_Denoise l Master_Denoise -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Master_Denoise') \nnuke.thisNode().knob('btname').setValue('Master_Denoise')"}
 addUserKnob {22 n_Roto l Roto T "nuke.thisNode().knob('input_node_2').setValue('Roto') \nnuke.thisNode().knob('btname').setValue('Roto')" +STARTLINE}
 addUserKnob {22 n_Key l Key -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Key') \nnuke.thisNode().knob('btname').setValue('Key')"}
 addUserKnob {22 n_Matte l Matte -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Matte') \nnuke.thisNode().knob('btname').setValue('Matte')"}
 addUserKnob {22 n_Camera l Camera T "nuke.thisNode().knob('input_node_2').setValue('Camera') \nnuke.thisNode().knob('btname').setValue('Camera')" +STARTLINE}
 addUserKnob {22 n_Format_Undisto l Format_Undisto -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('Format_Undisto') \nnuke.thisNode().knob('btname').setValue('Format_Undisto')"}
 addUserKnob {22 n_CG l CG -STARTLINE T "nuke.thisNode().knob('input_node_2').setValue('CG') \nnuke.thisNode().knob('btname').setValue('CG')"}
}
