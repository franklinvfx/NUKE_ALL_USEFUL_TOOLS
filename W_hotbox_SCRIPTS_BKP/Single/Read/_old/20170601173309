#----------------------------------------------------------------------------------------------------------
#
# AUTOMATICALLY GENERATED FILE TO BE USED BY MAGIC HOTBOX
#
# NAME: Breakout Layers
#
#----------------------------------------------------------------------------------------------------------

def main():
    import nuke
    import nukescripts
    import os
    from cgev.common import log

    class shuffleChannels(nukescripts.PythonPanel):
        def __init__(self, n):
            nukescripts.PythonPanel.__init__(self, 'shuffle channels')
            self.n = n
            self.channels = self.n.channels()

            # Layers list builder
            self.layers = []
            for i in range(len(self.channels)):
                chanName = self.channels[i].split('.')[0]
                if chanName not in self.layers and 'rgba' not in chanName:
                    self.layers.append(chanName)

            # UI
            self.tabGroup = nuke.BeginTabGroup_Knob('tabGroup', '')
            self.addKnob(self.tabGroup)
            # Layers Tab
            self.layersTab = nuke.Tab_Knob('layersTab', 'channels')
            self.addKnob(self.layersTab)

            availableNodes = '%s (%s node)' % (self.n.name(), self.n.Class())
            self.selectedNodeName = nuke.Text_Knob('selectedNodeName',
                                                   'selected node: ',
                                                   availableNodes)
            self.addKnob(self.selectedNodeName)

            self.separator = nuke.Text_Knob('separator', '')
            self.addKnob(self.separator)

            self.presets = nuke.Enumeration_Knob('presets',
                                                 '', ['                   '])
            self.addKnob(self.presets)

            '''self.savePreset = nuke.PyScript_Knob('savePreset',
                                                 'save preset',
                                                 'shuffleChannels.savePreset()')
            self.addKnob(self.savePreset)'''

            '''self.removePreset = nuke.PyScript_Knob('deletePreset',
                                                   'delete preset',
                                                   'shuffleChannels.deletePreset()')
            self.addKnob (self.removePreset)'''

            self.listLayers = []
            for i in range(len(self.layers)):
                layer = nuke.Boolean_Knob('layer'+str(i), str(self.layers[i]))
                self.addKnob(layer)
                layer.setFlag(4096)
                self.listLayers.append(layer)

            '''self.selectAllLayers = nuke.PyScript_Knob('selectAllLayers',
                                                      'select all layers',
                                                      "shuffleChannels.selectAll()")
            self.addKnob(self.selectAllLayers)
            self.selectAllLayers.setFlag(4096)

            self.deselectAllLayers = nuke.PyScript_Knob('deselectAllLayers',
                                                        'deselect all layers',
                                                        "shuffleChannels.deselectAll()")
            self.addKnob(self.deselectAllLayers)

            # Channels Tab
            self.channelsTab = nuke.Tab_Knob('channelsTab', 'channels')
            self.addKnob(self.channelsTab)
            for i in range(len(self.channels)):
                exec "self.channel%s = ''" % (i)
                exec "self.channel%s = nuke.Boolean_Knob ('channel%s', '%s')" %(i, i, self.channels[i])
                exec "self.addKnob (self.channel%s)" % i
                exec "self.channel%s.setFlag(4096)" % i'''

            # Prefs Tab
            self.prefsTab = nuke.Tab_Knob('prefsTab', 'preferences')
            self.addKnob(self.prefsTab)

            self.autocrop = nuke.Boolean_Knob('autocrop', 'autocrop')
            self.addKnob(self.autocrop)
            self.autocrop.setFlag(4096)

            self.unPremult = nuke.Boolean_Knob('unPremult',
                                               'add unpremult / premult nodes')
            self.addKnob(self.unPremult)
            self.unPremult.setFlag(4096)

            self.remove = nuke.Boolean_Knob('remove', 'add remove node')
            self.addKnob(self.remove)
            self.remove.setFlag(4096)

            self.grade = nuke.Boolean_Knob('grade', 'add grade node')
            self.addKnob(self.grade)
            self.grade.setFlag(4096)

            self.merge = nuke.Boolean_Knob('merge', 'add merge node')
            self.addKnob(self.merge)
            self.merge.setFlag(4096)
            self.operation = nuke.Enumeration_Knob('operation',
                                                   '  |    operation',
                                                   ['atop',
                                                    'average',
                                                    'color-burn',
                                                    'color-dodge',
                                                    'conjoint-over',
                                                    'copy', 'difference',
                                                    'disjoint-over',
                                                    'divide', 'exclusion',
                                                    'from',
                                                    'geometric',
                                                    'hard-light',
                                                    'hypot',
                                                    'in',
                                                    'mask',
                                                    'matte',
                                                    'max',
                                                    'min',
                                                    'minus',
                                                    'multiply',
                                                    'out',
                                                    'over',
                                                    'overlay',
                                                    'plus',
                                                    'screen',
                                                    'soft-light',
                                                    'stencil',
                                                    'under',
                                                    'xor'])
            self.addKnob(self.operation)
            self.operation.clearFlag(4096)
            self.operation.setValue('plus')

            self.copyAlpha = nuke.Boolean_Knob('copyAlpha',
                                               'add copyAlpha node')
            self.addKnob(self.copyAlpha)
            self.copyAlpha.setFlag(4096)

            self.noShuffLabel = nuke.Boolean_Knob('noShuffLabel',
                                                  'remove label from Shuffles')
            self.noShuffLabel.setValue(True)
            self.addKnob(self.noShuffLabel)
            self.noShuffLabel.setFlag(4096)

            self.separation = nuke.Double_Knob('separation',
                                               'separation between nodes')
            self.addKnob(self.separation)
            self.separation.setFlag(4096)
            self.separation.setRange(100, 400)
            self.separation.setDefaultValue([200])

            self.shuffLayersColor = nuke.ColorChip_Knob('shuffLayersColor',
                                                        'Shuffle color')
            self.addKnob(self.shuffLayersColor)
            prefNode = nuke.toNode('preferences')['NodeColour05Color'].value()
            self.shuffLayersColor.setDefaultValue([prefNode])
            self.shuffLayersColor.setFlag(4096)

            self.bdrop = nuke.Boolean_Knob('bdrop', 'add backDrop')
            self.addKnob(self.bdrop)
            self.bdrop.setFlag(4096)

            self.bdropColor = nuke.ColorChip_Knob('bdropColor',
                                                  'backDrop color')
            self.addKnob(self.bdropColor)
            self.bdropColor.setDefaultValue([926365441])

            self.separation01 = nuke.Text_Knob('separation01', '')
            self.addKnob(self.separation01)

            self.EndTab = nuke.EndTabGroup_Knob('endTabGroup', '')
            self.addKnob(self.EndTab)

            '''self.importAllChannels = nuke.PyScript_Knob('importAllChannels',
                                                        'all channels',
                                                        "print 'function to import all layers'")
            self.addKnob(self.importAllChannels)'''

        def knobChanged(self, knob):
            if knob == self.presets:
                updateLayersPreset()

        def returnLayers(self):
            return self.layers

        def returnChannels(self):
            return self.channels

    def getData():
        # Gets selected node or not
        try:
            global n
            n = nuke.selectedNode()
        except:
            nuke.message('Select a node.')
            return

        # if all good, launches the panel

        # Returns the layers list
        layers = shuffleChannels(n).returnLayers()
        # Returns the channels list
        channels = shuffleChannels(n).returnChannels()

        global p

        # Builds the panel
        p = shuffleChannels(n)

        # Changes panel dimensions
        windowHeight = len(layers)*20+165
        if windowHeight > 1000:
            windowHeight = 1000
        p.setMinimumSize(600, windowHeight)
        readPrefsFile(p)
        refreshPresetsMenu()

        # Launches the panel
        thePanel = p.showModalDialog()

        if thePanel is False:
            return
        else:
            pass

        # Bbeyond this point all happens after the panel has been closed
        # Creation of the prefs variable
        prefs = {'unPremult': p.unPremult.value(),
                 'remove': p.remove.value(),
                 'grade': p.grade.value(),
                 'merge': p.merge.value(),
                 'operation': p.operation.value(),
                 'copyAlpha': p.copyAlpha.value(),
                 'noShuffLabel': p.noShuffLabel.value(),
                 'separation': p.separation.value(),
                 'shuffLayersColor': p.shuffLayersColor.value(),
                 'bdrop': p.bdrop.value(),
                 'bdropColor': p.bdropColor.value(),
                 'autocrop': p.autocrop.value()}

        # Writes the preferences file
        writePrefsFile(p, str(prefs))
        # Here I collect what layers have been selected
        layerList = []
        for i in range(len(layers)):
            gate = p.listLayers[i].value()
            if gate is True:
                layerList.append(layers[i])

        # Here it will create a node tree if some layers have been selected
        if len(layerList) > 0:
            buildTree(layerList, prefs)
        else:
            return

    def selectAll():
        layers = shuffleChannels(n).returnLayers()
        for i in range(len(layers)):
            p.listLayers[i].setValue(True)
            p.listLayers[i].setEnabled(False)

    def deselectAll():
        layers = shuffleChannels(n).returnLayers()
        for i in range(len(layers)):
            p.listLayers[i].setValue(False)
            p.listLayers[i].setEnabled(True)

    def buildTree(layers, prefs):
        nukePrefs = nuke.toNode('preferences')
        defGoofyFootValue = nukePrefs['goofy_foot'].value()
        nukePrefs['goofy_foot'].setValue(0)
        selNodeXPos = n.xpos()
        selNodeYPos = n.ypos()

        n['selected'].setValue(False)

        shuffDot0 = nuke.createNode('Dot', 'selected False', False)
        shuffDot0['xpos'].setValue(selNodeXPos + 200)
        shuffDot0YPos = int(selNodeYPos + 100)
        shuffDot0['ypos'].setValue(shuffDot0YPos)
        shuffDot0.setInput(0, n)

        # Creation of nodes
        listShuffDots = []
        for i in range(len(layers)):
            # Dots
            newXPos = (prefs['separation']*(i+1))+shuffDot0['xpos'].value()
            shuffDot = nuke.createNode('Dot', inpanel=False)
            shuffDot.knob('name').setValue('shuffDot' + str((i+1)))
            shuffDot.knob('xpos').setValue(newXPos)
            shuffDot.knob('ypos').setValue(shuffDot0YPos)
            listShuffDots.append(shuffDot)
            lastDot = i
        listShuffDots[len(layers)-1].knob('selected').setValue(False)

        # Shuffles
        listMerges = []
        listShuf = []
        for i in range(len(layers)):
            newXPos = (prefs['separation']*(i+1))+shuffDot0['xpos'].value()
            setShuf = 'name %s in %s ' % (layers[i], layers[i])
            setShuf += 'selected False xpos %s ypos %s' % (newXPos-34,
                                                           shuffDot0YPos+50)
            shuf = nuke.createNode('Shuffle', setShuf, False)
            shuf.setInput(0, listShuffDots[i])
            if i == 0:
                shuf['xpos'].setValue(newXPos-34)
                shuf['ypos'].setValue(shuffDot0YPos+50)

            if prefs['autocrop']:
                listShuf.append(shuf)

            # Color
            if prefs['shuffLayersColor'] != nuke.toNode('preferences')['NodeColour05Color'].value():
                shuf['tile_color'].setValue(prefs['shuffLayersColor'])

            # Label
            if prefs['noShuffLabel'] == True:
                shuf['label'].setValue('')

            # Removes
            if prefs['remove'] == True:
                setRem = 'operation keep channels rgba selected False xpos '
                setRem += '%s ypos %s' % (newXPos-34, shuffDot0YPos+114)
                rem = nuke.createNode('Remove', setRem, False)
                rem.setInput(0, shuf)

            # Grades
            if prefs['grade'] == True:
                setGrade = 'xpos %s ypos %s' % (newXPos-34, shuffDot0YPos+300)
                grad = nuke.createNode('Grade', setGrade, False)

            # Merges
            if prefs['merge'] == True:
                if i == 0:
                    setDot = 'xpos %s ypos ' % newXPos
                    setDot += '%s selected False' % str(shuffDot0YPos+504)
                    dotMerge = nuke.createNode('Dot', setDot, False)
                else:
                    setMerge = 'operation %s ' % prefs['operation']
                    setMerge += 'xpos %s ypos %s' % (newXPos-34,
                                                     shuffDot0YPos+500)

                    merge = nuke.createNode('Merge', setMerge, False)
                    listMerges.append(merge)
                    nukescripts.swapAB(listMerges[i-1])

                    if i == 1:
                        listMerges[i-1].setInput(0, dotMerge)
                    else:
                        listMerges[i-1].setInput(0, listMerges[i-2])

        if listShuf != []:
            nuke.selectAll()
            nuke.invertSelection()

            for shuf in listShuf:
                shuf.setSelected(True)
                nukescripts.autocrop()
                shuf.setSelected(False)

        # CopyAlpha
        if prefs['copyAlpha'] == True:
            copyDot = nuke.createNode('Dot', inpanel=False)
            copyDot.setXYpos(int(newXPos+prefs['separation']), shuffDot0YPos)

            copyDot.setInput(0, listShuffDots[-1])

            setNode = 'xpos %s ypos %s' % (newXPos+prefs['separation']-34,
                                           shuffDot0YPos+494)
            copyNode = nuke.createNode('Copy', setNode, False)
            try:
                copyNode.setInput(0, listMerges[len(layers)-1])
            except:
                pass
            copyNode.setInput(1, copyDot)

        # Premult
        if prefs['unPremult'] == True:
            unpr = nuke.createNode('Unpremult', inpanel=False)
            unpr.knob('channels').setValue('all')
            unpr.setInput(0, shuffDot0)
            unpr.setXYpos(shuffDot0.xpos()+50, shuffDot0YPos-10)
            unpr.setSelected(False)

            prem = nuke.createNode('Premult', inpanel=False)
            prem.setXYpos(int(newXPos+prefs['separation']-34),
                          shuffDot0YPos+550)
            prem['selected'].setValue(False)
            prem['channels'].setValue('all')

            if prefs['copyAlpha'] == True:
                prem.setInput(0, copyNode)
            elif prefs['merge'] == True:
                prem.setInput(0, listMerges[-1])
                prem['xpos'].setValue(listMerges[-1].xpos())
            elif prefs['grade'] == True:
                prem.setInput(0, grad)
                prem['xpos'].setValue(grad.xpos())
            elif prefs['remove'] == True:
                prem.setInput(0, rem)
                prem['xpos'].setValue(rem.xpos())
            else:
                prem.setInput(0, shuf)
                prem['xpos'].setValue(shuf.xpos())
            listShuffDots[0].setInput(0, unpr)

        # BackDrop
        width = 0
        height = 0
        if prefs['bdrop'] == True:
            width = (prefs['separation'] * (len(layers)+1))
            if prefs['unPremult'] == True:
                height = 750
            elif prefs['copyAlpha'] == True:
                height = 650
            elif prefs['grade'] == True:
                height = 500
            elif prefs['merge'] == True:
                height = 600
            elif prefs['remove'] == True:
                height = 300
            else:
                height = 250
            if prefs['copyAlpha'] == True:
                width = width + prefs['separation']

            bd = nuke.createNode('BackdropNode',
                                 'tile_color %s' % (prefs['bdropColor']),
                                 False)
            bd['xpos'].setValue(shuffDot0.xpos() - 100)
            bd['ypos'].setValue(shuffDot0.ypos() - 100)
            bd['bdwidth'].setValue(width)
            bd['bdheight'].setValue(height)

        # Resets prefs to user defined state
        nukePrefs = nuke.toNode('preferences')
        nukePrefs['goofy_foot'].setValue(defGoofyFootValue)

    # Reads the preferences file and sets the values on the panel knobs
    def readPrefsFile(p):
        try:
            filepathR = '%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME')
            prefsFileR = open(filepathR, 'r')
        except:
            filepathW = '%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME')
            prefsFileW = open(filepathW, 'w')
            prefsFileW.write("['prefs', {'Selected':['Selected'], 'All': ['All']}]")
            prefsFileW.close()
            return
        prefs = eval(prefsFileR.read())[0]
        for key in prefs:
            if key == 'unPremult':
                p.unPremult.setValue(prefs[key])
            elif key == 'remove':
                p.remove.setValue(prefs[key])
            elif key == 'grade':
                p.grade.setValue(prefs[key])
            elif key == 'merge':
                p.merge.setValue(prefs[key])
            elif key == 'copyAlpha':
                p.copyAlpha.setValue(prefs[key])
            elif key == 'noShuffLabel':
                p.noShuffLabel.setValue(prefs[key])
            elif key == 'separation':
                p.separation.setValue(prefs[key])
            elif key == 'shuffLayersColor':
                p.shuffLayersColor.setValue(prefs[key])
            elif key == 'bdrop':
                p.bdrop.setValue(prefs[key])
            elif key == 'bdropColor':
                p.bdropColor.setValue(prefs[key])
            elif key == 'operation':
                p.operation.setValue(str(prefs[key]))
            elif key == 'autocrop':
                p.autocrop.setValue(prefs[key])

    def writePrefsFile(p, prefs):
        prefsFile = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                         'r')
        prefsFileContent = eval(prefsFile.read())
        prefsFile.close()
        prefsFile = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                         'w')
        prefsFile.write("[%s, %s]" % (prefs, prefsFileContent[1]))

    def refreshPresetsMenu():
        prefsFileR = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                          'r')
        prefsFileContent = eval(prefsFileR.read())
        presetsInFile = prefsFileContent[1]
        listPresets = sorted(presetsInFile.keys())
        listPresets.remove('All')
        listPresets.remove('Selected')
        listPresets.insert(0, 'All')
        listPresets.insert(0, 'Selected')
        p.presets.setValues(listPresets)

    def updateLayersPreset():
        prefsFileR = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                          'r')
        prefsFileContent = eval(prefsFileR.read())
        presetsInFile = prefsFileContent[1]

        deselectAll()

        layersInPreset = presetsInFile[p.presets.value()]

        layers = shuffleChannels(n).returnLayers()


        log.debug3(prefsFileContent)
        log.debug3(layersInPreset)
        log.debug3(layers)


        if p.presets.value() not in ['All', 'Selected']:
            for i in range(len(layers)):
                lay = p.listLayers[i].label()
                if lay in layersInPreset:
                    p.listLayers[i].setValue(True)
        elif p.presets.value() == 'All':
            selectAll()
        else:
            deselectAll()

    '''def savePreset():
        presetName = nuke.getInput('name of preset')
        if presetName is None or '':
            return
        presetLayers = []
        layers = shuffleChannels(n).returnLayers()
        for i in range(len(layers)):
            selected = p.listLayers[i].value()
            if selected is True:
                presetLayers.append(layers[i])
        preset = {}
        preset[presetName] = presetLayers
        # print 'and the preset is:  %s' %preset

        prefsFileR = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                          'r')
        prefsFileContent = eval(prefsFileR.read())
        presetsInFile = prefsFileContent[1]
        presetsInFile[presetName] = presetLayers
        prefsFileW = open('%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME'),
                          'w')
        prefsFileW.write("[%s, %s]" % (prefsFileContent[0], presetsInFile))
        prefsFileW.close()
        refreshPresetsMenu()
        p.presets.setValue(presetName)'''

    '''def deletePreset():
        if p.presets.value() not in ['all', 'none']:
            filepathR = '%s/.nuke/shufflePanelPrefs.txt' % os.getenv('HOME')
            prefsFileR = open(filepathR, 'r')
            prefsFileContent = eval(prefsFileR.read())
            presetsInFile = prefsFileContent[1]

            if p.presets.value() not in ['all', 'none']:
                del presetsInFile[p.presets.value()]
                filepathW = '%s/.nuke/' % os.getenv('HOME')
                filepathW += 'shufflePanelPrefs.txt'
                prefsFileW = open(filepathW, 'w')
                prefsFileW.write("[%s, %s]" % (prefsFileContent[0],
                                               presetsInFile))
            prefsFileW.close()

            p.presets.setValue('none')
            refreshPresetsMenu()'''
    getData()
main()
