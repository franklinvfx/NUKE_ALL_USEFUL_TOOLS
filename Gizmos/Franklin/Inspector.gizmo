NoOp {
 name Inspector
 knobChanged "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\nsave = nuke.selectedNodes()\n       \n#------------------\nclassToAvoid = \['Constant', 'Read', 'CheckerBoard2', 'ColorBars', 'ColorWheel', 'BackdropNode', 'StickyNote']\nnameToAvoid = \['Inspect', 'Inspect1', 'Control', 'Control1']\n#--------------------\n\nif sel == 'All':\n    n.knob('tile_color').setValue(2820412159)\n    n.knob('output').setValue('All Nodes')\nelse:\n    n.knob('tile_color').setValue(3846969599)\n    n.knob('output').setValue('Selected Nodes')\n\nif nuke.thisKnob().name() == 'show_guinodes':\n    def show_gui(selectedState):\n        for node in nuke.selectedNodes():\n            node.setSelected(False)\n\n        if sel == 'All':\n            message = 'No node with \$gui expression in this comp'\n            for node in nuke.allNodes():\n                expressionNodes = \[knob for knob in node.allKnobs() if knob.hasExpression() and '\$gui' in knob.toScript()]\n                if len(expressionNodes) > 0:\n                    expressionNodes\[0].node().setSelected(True)\n                    if selectedState:\n                        node\['icon'].setValue('F_gui.png')\n                        node\['tile_color'].setValue(0x70dbff)\n                    else:\n                        node\['icon'].setValue('')\n                        node\['tile_color'].setValue(0)\n        else:\n            message = 'No node with \$gui expression in current selection'\n            for node in save:\n                expressionNodes = \[knob for knob in node.allKnobs() if knob.hasExpression() and '\$gui' in knob.toScript()]\n                if len(expressionNodes) > 0:\n                    expressionNodes\[0].node().setSelected(True)\n                    if selectedState:\n                        node\['icon'].setValue('F_gui.png')\n                        node\['tile_color'].setValue(0x70dbff)\n                    else:\n                        node\['icon'].setValue('')\n                        node\['tile_color'].setValue(0)\n\n        if len(nuke.selectedNodes()) == 0:\n            temp = n.knob('show_guinodes').value()\n            n.knob('show_guinodes').setValue(not temp)\n            n.knob('show_guinodes').setFlag(0x00010000)\n            nuke.message(message)\n\n        for node in nuke.allNodes():\n            if node in save:\n                node.setSelected(True)\n            else:\n                node.setSelected(False)\n\n    selected = n\['show_guinodes'].value()\n    show_gui(selectedState=selected)\n\nelif nuke.thisKnob().name() == 'show_hidenodes':\n    def show_hide(selectedState):\n        if sel == 'All':\n            hiddenNodes = \[node for node in nuke.allNodes() if node.knob('hide_input').value() and node.Class() not in classToAvoid and node.name() not in nameToAvoid]\n            print hiddenNodes\n            message = 'No hidden node in this comp'\n        else:\n            hiddenNodes = \[node for node in save if node.knob('hide_input').value() and node.Class() not in classToAvoid and node.name() not in nameToAvoid]\n            message = 'No hidden node in the current selection'\n\n        if len(hiddenNodes) > 0:\n            for node in hiddenNodes:\n                hideState = node\['hide_input'].value()\n                if selectedState:\n                    if hideState:\n                       node\['icon'].setValue('F_hideinput.png')\n                       node\['tile_color'].setValue(0xea0000ff)\n                    else:\n                       node\['icon'].setValue('')\n                elif hideState:\n                    node\['icon'].setValue('')\n                    node\['tile_color'].setValue(0)\n        else:\n            temp = n.knob('show_hidenodes').value()\n            n.knob('show_hidenodes').setValue(not temp)\n            n.knob('show_hidenodes').setFlag(0x00010000)\n            nuke.message(message)\n\n    selected = n\['show_hidenodes'].value()\n    show_hide(selectedState=selected)"
 tile_color 0xa81c12ff
 selected true
 hide_input true
 addUserKnob {20 FT l "Inspect Script"}
 addUserKnob {26 S02 l "                         " T " "}
 addUserKnob {4 srcnodes l "Source Nodes" M {All Selected ""}}
 addUserKnob {22 selectrelated l "  Select Related Nodes  " -STARTLINE T "def selectDependencies(nodeBase):\n    nodeBase\['selected'].setValue(True)\n    for node in nodeBase.dependencies():\n        if node not in nuke.selectedNodes():\n            selectDependencies(node)\n        \ndef selectDependent(nodeBase):\n    nodeBase\['selected'].setValue(True)\n    for node in nodeBase.dependent():\n        if node not in nuke.selectedNodes():\n            selectDependent(node)\n\ndef getAllDependencies(nodeBase,nodeType=None):\n    relatedNodes = set()\n    if nodeType == None or nodeBase.Class() == nodeType :\n        relatedNodes.add(nodeBase)\n    for node in nodeBase.dependencies():\n        relatedNodes=relatedNodes.union( getAllDependencies(node,nodeType) )\n    return relatedNodes\n\ndef isUsedBackdrop(backdrop, nodes):\n    left = backdrop.xpos()\n    top = backdrop.ypos() + 20\n    right = left + backdrop\['bdwidth'].value() - 20\n    bottom = top + backdrop\['bdheight'].value() - 20\n    for node in nodes:\n        if (node.xpos() > left and\n            node.xpos() < right and\n            node.ypos() > top and\n            node.ypos() < bottom):\n            return True\n    return False\n\ndef selectRelatedBackdrops(relatedNodes):\n    for bdnode in nuke.allNodes(\"BackdropNode\"):\n        if isUsedBackdrop(bdnode, relatedNodes):\n            bdnode.setSelected(True)\n\nn = nuke.thisNode()\nsel = nuke.selectedNodes()\nv = nuke.allNodes(\"Viewer\")  \nall = nuke.allNodes()\n\ndef selectrelated():\n    for node in sel:\n        selectDependencies(node)\n\n    selectRelatedBackdrops(nuke.selectedNodes())\n\n    n.setSelected(True)\n        \ndef deleteother():\n    if len(sel) != 0:\n        if len(sel) == 1 and n == nuke.selectedNode():\n            nuke.message('No Nodes Selected!')\n        else:\n            selectrelated()\n    else:\n        nuke.message('No Nodes Selected!')\n        \ndeleteother()"}
 addUserKnob {26 S03 l " " T " "}
 addUserKnob {26 ""}
 addUserKnob {20 hidden_group l "Hidden Input Nodes" n 1}
 addUserKnob {22 reset_hide l " Un-Hide Input " -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\n\t\ndef selectAll():\n    for a in nuke.allNodes():\n       if a.Class() != 'Constant' and a.Class() != 'Read' and a.Class() != 'CheckerBoard2' and a.Class() != 'ColorBars' and a.Class() != 'ColorWheel' and a.Class() != 'BackdropNode' and a.Class() != 'StickyNote' and a.name() != 'Inspect' and a.name() != 'Inspect1' and a.name() != 'Control' and a.name() != 'Control1':\n          d = a\['hide_input'].value()\n          if d==1:\n             a \['icon'].setValue('')\n             a \['hide_input'].setValue(0)\n\t\t\t\t\t\ndef select():\n    for a in nuke.selectedNodes():\n       if a.Class() != 'Constant' and a.Class() != 'Read' and a.Class() != 'CheckerBoard2' and a.Class() != 'ColorBars' and a.Class() != 'ColorWheel' and a.Class() != 'BackdropNode' and a.Class() != 'StickyNote' and a.name() != 'Inspect' and a.name() != 'Inspect1' and a.name() != 'Control' and a.name() != 'Control1':\n          d = a\['hide_input'].value()\n          if d==1:\n             a \['icon'].setValue('')\n             a \['hide_input'].setValue(0)\n\nif sel == 'All':\n    selectAll()\t\t\nelif sel == 'Selected':\n    select()"}
 addUserKnob {26 SP01 l "" -STARTLINE T "      "}
 addUserKnob {6 show_hidenodes l "Show Nodes     " -STARTLINE}
 addUserKnob {22 hide_select l "Select Nodes" -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\nsave = nuke.selectedNodes()\n\nclassToAvoid = \['Constant', 'Read', 'CheckerBoard2', 'ColorBars', 'ColorWheel', 'BackdropNode', 'StickyNote']\nnameToAvoid = \['Inspect', 'Inspect1', 'Control', 'Control1']\n\nfor node in nuke.allNodes():\n    node.setSelected(False)\n\t\ndef select_hidden(hiddenNodes):\n    #Si au moins 1 noeud est hide\n    if len(hiddenNodes) > 0:\n        for node in hiddenNodes:\n            node.setSelected(True)\n    else:\n        if sel == 'All':\n            nuke.message('No hidden node in this comp')\n        else:\n            nuke.message('No hidden node in the current selection')\n\nif sel == 'All':\n    hiddenNodes = \[node for node in nuke.allNodes() if node.knob('hide_input').value() and node.Class() not in classToAvoid and node.name() not in nameToAvoid]\nelse:\n    hiddenNodes = \[node for node in save if node.knob('hide_input').value() and node.Class() not in classToAvoid and node.name() not in nameToAvoid]\nprint len(save)\n\nselect_hidden(hiddenNodes)"}
 addUserKnob {26 T01 l INVISIBLE +INVISIBLE T "Drive nodes with hidden inputs."}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 gui_group l "\$GUI Expressions" n 1}
 addUserKnob {22 reset_gui l " Remove \$gui  " t "Remove all \$gui expressions in selected Nodes!" -STARTLINE T "listgui = nuke.thisNode()\['listgui'].value()\nfor node in nuke.allNodes():\n    if node.name() in listgui:\n        for knob in node.knobs():\n            if node\[knob].hasExpression():\n                if '\$gui' in node\[knob].toScript():\n                    node\[knob].clearAnimated()\n\nfor n in nuke.allNodes():\n    if n.name() in nuke.thisNode()\['listgui'].value():\n        n.setSelected(True)\n        n \['icon'].setValue('F_noicon.png')\n        n \['tile_color'].setValue(0)\n        n \['selected'].setValue(0)\n    else:\n        n.setSelected(False)        \n"}
 addUserKnob {26 SP02 l "" -STARTLINE T "      "}
 addUserKnob {6 show_guinodes l "Show Nodes     " -STARTLINE}
 addUserKnob {22 gui_select l "Select Nodes" -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\nsave = nuke.selectedNodes()\n\nfor node in nuke.selectedNodes():\n    node.setSelected(False)\n\nif sel == 'Selected':\n    for node in save:\n        expressionNodes = \[knob for knob in node.allKnobs() if knob.hasExpression() and '\$gui' in knob.toScript()]\n        if len(expressionNodes) > 0:\n            expressionNodes\[0].node().setSelected(True)\n    if len(nuke.selectedNodes()) == 0:\n        nuke.message('No node with \$gui expression in current selection')\nelse:\n    for node in nuke.allNodes():\n        expressionNodes = \[knob for knob in node.allKnobs() if knob.hasExpression() and '\$gui' in knob.toScript()]\n        if len(expressionNodes) > 0:\n            expressionNodes\[0].node().setSelected(True)\n    if len(nuke.selectedNodes()) == 0:\n        nuke.message('No node with \$gui expression in this comp')"}
 addUserKnob {26 T06 l INVISIBLE +INVISIBLE T "\n\nDrive nodes with \$GUI expressions."}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 delete_group l "Delete Nodes" n 1}
 addUserKnob {22 delete_disable l "Disable Nodes" -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\n\t\ndef selectAll():\n   for a in nuke.allNodes():\n      d = a\['name'].value()\n      if d != 'Control' and d != 'Control1' and d != 'Control2' and d != 'Control3' and d != 'Control4' and d != 'Control5' :\n        if 'disable' in a.knobs():\n           if a\['disable'].isAnimated():\n                  pass\n           elif a\['disable'].hasExpression():\n                  pass\n           elif a\['disable'].value():\n              nuke.delete(a)\n\ndef select():\n   for a in nuke.selectedNodes():\n      d = a\['name'].value()\n      if d != 'Control' and d != 'Control1' and d != 'Control2' and d != 'Control3' and d != 'Control4' and d != 'Control5' :\n        if 'disable' in a.knobs():\n           if a\['disable'].isAnimated():\n                  pass\n           elif a\['disable'].hasExpression():\n                  pass\n           elif a\['disable'].value():\n              nuke.delete(a)\n\nif sel == 'All':\n    selectAll()\t\t\nelif sel == 'Selected':\n    select()"}
 addUserKnob {22 deleteviewer l Viewer -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\n\t\ndef selectAll():\n   for a in nuke.allNodes():\n       if a.Class() == 'Viewer':\n          nuke.delete(a)\n\ndef select():\n   for a in nuke.selectedNodes():\n       if a.Class() == 'Viewer':\n          nuke.delete(a)\n\nif sel == 'All':\n    selectAll()\t\t\nelif sel == 'Selected':\n    select()"}
 addUserKnob {26 SP03 l " " -STARTLINE T "      "}
 addUserKnob {22 norelated l " No-Related Nodes " -STARTLINE T "def selectDependencies(nodeBase):\n    nodeBase\['selected'].setValue(True)\n    for node in nodeBase.dependencies():\n        if node not in nuke.selectedNodes():\n            selectDependencies(node)\n        \ndef selectDependent(nodeBase):\n    nodeBase\['selected'].setValue(True)\n    for node in nodeBase.dependent():\n        if node not in nuke.selectedNodes():\n            selectDependent(node)\n\ndef getAllDependencies(nodeBase,nodeType=None):\n    relatedNodes = set()\n    if nodeType == None or nodeBase.Class() == nodeType :\n        relatedNodes.add(nodeBase)\n    for node in nodeBase.dependencies():\n        relatedNodes=relatedNodes.union( getAllDependencies(node,nodeType) )\n    return relatedNodes\n\ndef isUsedBackdrop(backdrop, nodes):\n    left = backdrop.xpos()\n    top = backdrop.ypos() + 20\n    right = left + backdrop\['bdwidth'].value() - 20\n    bottom = top + backdrop\['bdheight'].value() - 20\n    for node in nodes:\n        if (node.xpos() > left and\n            node.xpos() < right and\n            node.ypos() > top and\n            node.ypos() < bottom):\n            return True\n    return False\n\ndef selectRelatedBackdrops(relatedNodes):\n    for bdnode in nuke.allNodes(\"BackdropNode\"):\n        if isUsedBackdrop(bdnode, relatedNodes):\n            bdnode.setSelected(True)\n\nn = nuke.thisNode()\nsel = nuke.selectedNodes()\nv = nuke.allNodes(\"Viewer\")  \nall = nuke.allNodes()\n\ndef selectrelated():\n    for node in sel:\n        selectDependencies(node)\n\n    selectRelatedBackdrops(nuke.selectedNodes())\n\n    n.setSelected(True)\n    node = nuke.invertSelection()\n\n        \ndef deleteother():\n    if len(sel) != 0:\n        if len(sel) == 1 and n == nuke.selectedNode():\n            nuke.message('No Nodes Selected!')\n        else:\n            selectrelated()\n\n            for v in nuke.selectedNodes():\n                nuke.delete(v)\n    else:\n        nuke.message('No Nodes Selected!')\n        \ndeleteother()"}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 color_group l "Color Node" n 1}
 addUserKnob {22 reset_color l " Default color Nodes " -STARTLINE T "n = nuke.thisNode()\nsel = n\['srcnodes'].value()\n\t\ndef selectAll():\n     for a in nuke.allNodes():\n       if a.name() != 'Inspect' and a.name() != 'Inspect1' and a.name() != 'Inspect2' and a.Class() != 'Group' and a.Class() != 'BackdropNode' and a.Class() != 'NoOp' and a.Class() != 'StickyNote':\n         #a \['icon'].setValue('F_noicon.png')\n         a \['tile_color'].setValue(0)\n\t\t\t\t\t\ndef select():\n     for a in nuke.selectedNodes():\n       if a.name() != 'Inspect' and a.name() != 'Inspect1' and a.name() != 'Inspect2' and a.Class() != 'Group' and a.Class() != 'BackdropNode' and a.Class() != 'NoOp' and a.Class() != 'StickyNote':\n         #a \['icon'].setValue('F_noicon.png')\n         a \['tile_color'].setValue(0)\n\nif sel == 'All':\n    selectAll()\t\t\nelif sel == 'Selected':\n    select()"}
 addUserKnob {20 endGroup_3 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 FT2 l " " T "                                                                                               "}
 addUserKnob {26 FTools l " " t "FranklinVfxonly.com\n" -STARTLINE T "<font color=\"#1C1C1C\"> Franklin Vfx - 2017"}
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "All Nodes"
}
