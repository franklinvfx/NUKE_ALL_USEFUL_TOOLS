set cut_paste_input [stack 0]
version 6.3 v4
Group {
 inputs 0
 name LABELLER
 help "V!ctor Tools 2.0v1\nV_Multilabeler\nÂ©2016 Victor Perez. All rights reserved\nwww.victorperez.co.uk"
 tile_color 0xffffff01
 note_font Verdana
 selected true
 xpos 34
 ypos 130
 hide_input true
 addUserKnob {20 V_Multilabeler}
 addUserKnob {18 target_tile_color l "tile color" t "Select a color for the tile"}
 target_tile_color {1 1 1}
 addUserKnob {6 target_tile_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 space_03 l "  " T " "}
 addUserKnob {41 target_label l label T LabelProperties.label}
 addUserKnob {41 note_font_1 l font T LabelProperties.note_font}
 addUserKnob {41 note_font_size_1 l "" -STARTLINE T LabelProperties.note_font_size}
 addUserKnob {41 note_font_color_1 l color -STARTLINE T LabelProperties.note_font_color}
 addUserKnob {26 space_01 l " " T " "}
 addUserKnob {6 box_tile_color l "change tile color" t "Change the tile color" +STARTLINE}
 box_tile_color true
 addUserKnob {6 box_label l "change label" t "Change the label" -STARTLINE}
 box_label true
 addUserKnob {6 box_font l "change font" t "change font properties" -STARTLINE}
 box_font true
 addUserKnob {6 box_hide_inputs l "hidden inputs" t "Don't draw the arrows going into these nodes when they are not selected" -STARTLINE}
 box_hide_inputs true
 addUserKnob {22 execute_apply l Apply t "Apply changes to selected nodes" T "import colorsys\n\n# knobs to variables\ntarget_tile_color = nuke.thisNode().knob('target_tile_color').getValue()\ntarget_label = nuke.toNode('LabelProperties').knob('label').value()\ntarget_note_font = nuke.toNode('LabelProperties').knob('note_font').value()\ntarget_note_font_size = nuke.toNode('LabelProperties').knob('note_font_size').value()\ntarget_note_font_color = nuke.toNode('LabelProperties').knob('note_font_color').value()\nbox_tile_color = nuke.thisNode().knob('box_tile_color').value()\nbox_label = nuke.thisNode().knob('box_label').value()\nbox_font = nuke.thisNode().knob('box_font').value()\nbox_hide_inputs = nuke.thisNode().knob('box_hide_inputs').value()\n\n# RGB to HEX translator\ntarget_tile_color_r = target_tile_color\[0]\ntarget_tile_color_g = target_tile_color\[1]\ntarget_tile_color_b = target_tile_color\[2]\nhexColour = int('%02x%02x%02x%02x' % (target_tile_color_r*255,target_tile_color_g*255,target_tile_color_b*255,1), 16)\n\n# tile color action\nif box_tile_color:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('tile_color').setValue(hexColour)\nelse:\n    pass\n\n# label action\nif box_label:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('label').setValue(target_label)\nelse:\n    pass\n\n# font action\nif box_font:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('note_font').setValue(target_note_font)\n        i.knob('note_font_size').setValue(target_note_font_size)\n        i.knob('note_font_color').setValue(target_note_font_color)\nelse:\n    pass\n\n# hide inputs action\nif box_hide_inputs:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('hide_input').setValue(True)\nelse:\n    pass\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')\nelif box_tile_color == False and box_label == False and box_font == False and box_hide_inputs == False:\n        nuke.message('No changes applied')" +STARTLINE}
 addUserKnob {22 execute_default l "Revert to Default" t "Revert to default color tile and/or label to selected nodes" -STARTLINE T "import colorsys\n\n# knobs to variables\ntarget_tile_color = nuke.thisNode().knob('target_tile_color').getValue()\ntarget_label = nuke.thisNode().knob('target_label').value()\nbox_tile_color = nuke.thisNode().knob('box_tile_color').value()\nbox_label = nuke.thisNode().knob('box_label').value()\nbox_font = nuke.thisNode().knob('box_font').value()\nbox_hide_inputs = nuke.thisNode().knob('box_hide_inputs').value()\ndefaultFont = nuke.toNode('DefaultProperties').knob('note_font').value()\ndefaultFontSize = nuke.toNode('DefaultProperties').knob('note_font_size').value()\ndefaultFontColor = nuke.toNode('DefaultProperties').knob('note_font_color').value()\n\n# tile color action\nif box_tile_color:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('tile_color').setValue(0)\nelse:\n    pass\n\n# label action\nif box_label:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('label').setValue(None)\nelse:\n    pass\n\n# font action\nif box_font:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('note_font').setValue(defaultFont)\n        i.knob('note_font_size').setValue(defaultFontSize)\n        i.knob('note_font_color').setValue(defaultFontColor)\nelse:\n    pass\n\n# hide inputs action\nif box_hide_inputs:\n    nuke.root().begin()\n    for i in nuke.selectedNodes():\n        i.knob('hide_input').setValue(False)\nelse:\n    pass\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')\nelif box_tile_color == False and box_label == False and box_font == False and box_hide_inputs == False:\n        nuke.message('No changes applied')"}
 addUserKnob {26 space_02 l " " T " "}
 addUserKnob {26 attach_an_image l "Node Icon"}
 addUserKnob {2 image_file l "icon file" t "Browse for an image  to be attached. The .png file is highly recommended, it should be manageable, a suggested image size of 90x66 pixels, and set up the image as a transparent bg (.png) file"}
 image_file C:/Users/Franklin/Desktop/SourisAudi.png
 addUserKnob {22 execute_attach_image_to_nodes l "Set Icon" t "Attach the selected image as node icon in the node graph" T "# knobs to variables\nimage_file = nuke.thisNode().knob('image_file').getValue()\n\n# tile color action\nnuke.root().begin()\nif image_file is '':\n    nuke.message('No icon file set')    \nelse:\n    for i in nuke.selectedNodes():\n        i\['icon'].setValue(image_file)\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')" +STARTLINE}
 addUserKnob {22 execute_remove_image l "Remove Node Icon" t "Remove any node icon from the selected nodes" -STARTLINE T "# knobs to variables\nimage_file = nuke.thisNode().knob('image_file').getValue()\n\n# tile color action\nnuke.root().begin()\nfor i in nuke.selectedNodes():\n    i\['icon'].setValue('')\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')"}
 addUserKnob {26 automated_tasks l "Automated Tasks"}
 addUserKnob {22 execute_spectrum_tile_color l "Color Spectrum Tiles" t "Change the tile color of selected nodes with different steps of the color spectrum" T "import colorsys\n\nnuke.root().begin()\nvariations = len(nuke.selectedNodes())\nfor num,i in enumerate(nuke.selectedNodes()):\n    newcolor = float(num)/float(variations)\n    setRGB = colorsys.hsv_to_rgb(newcolor, 1, 1)\n    # Float R, G, and B values for the color you're after\n    r = setRGB\[0]\n    g = setRGB\[1]\n    b = setRGB\[2]\n    hexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n    i\['tile_color'].setValue(hexColour)\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')" +STARTLINE}
 addUserKnob {22 execute_class_in_label l "Node Class as Label" t "Change the label to selected nodes with its node class" -STARTLINE T "# knobs to variables\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\n\nnuke.root().begin()\nfor i in nuke.selectedNodes():\n    if i.Class() == 'StickyNote':\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        if currentLabel \[0:36] == '<img src=\"StickyNote.png\">StickyNote':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<img src=\"StickyNote.png\">StickyNote\\n'+currentLabel)\n    elif i.Class() == 'BackdropNode':\n        pass\n    else:\n        i.knob('label').setValue(i.Class())\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')"}
 addUserKnob {22 IconClass l "Icon Class as Node Icon" t "Set the node icon to selected nodes with its node class icon (as seen in the toolbar)" -STARTLINE T "# knobs to variables\nimage_file = nuke.thisNode().knob('image_file').getValue()\n\n# tile color action\nnuke.root().begin()\nfor i in nuke.selectedNodes():\n    i\['icon'].setValue(i.Class()+'.png')\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n        nuke.message('No nodes selected')"}
 addUserKnob {22 spectrum_Backdrops l "Color Spectrum All Backdrops" t "Change the color of all Backdrop nodes present in the script (selected or not) with different steps of the color spectrum" T "import colorsys\n\nnuke.root().begin()\nvariations = len(nuke.allNodes('BackdropNode'))\nfor num,i in enumerate(nuke.allNodes('BackdropNode')):\n    newcolor = float(num)/float(variations)\n    setRGB = colorsys.hsv_to_rgb(newcolor, 1, 0.5)\n    # Float R, G, and B values for the color you're after\n    r = setRGB\[0]\n    g = setRGB\[1]\n    b = setRGB\[2]\n    hexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)" +STARTLINE}
 addUserKnob {22 execute_hide_inputs l "Hide Inputs" -STARTLINE T "# hide inputs action\nnuke.root().begin()\nfor i in nuke.selectedNodes():\n    try:\n        i.knob('hide_input').setValue(True)\n    except:\n        pass\nelse:\n    pass\n\n# Messages\nnuke.root().begin()\nif len(nuke.selectedNodes()) == 0:\n    nuke.message('No nodes selected')"}
 addUserKnob {26 space_05 l " " T " "}
 addUserKnob {20 backdrops_presets l "Backdrops Presets" n 1}
 addUserKnob {6 includeDots l "customise Dots" t "Apply presets to selected Dot nodes" +STARTLINE}
 includeDots true
 addUserKnob {6 includeStickyNotes l "customise StickyNotes" t "Apply presets to selected StickyNote nodes" -STARTLINE}
 includeStickyNotes true
 addUserKnob {22 bd_Key l Key t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Key'\npresetIcon = 'Keyer.png'\npresetColor = colorsys.hsv_to_rgb(0.333, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_Roto l Roto t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Roto'\npresetIcon = 'Roto.png'\npresetColor = colorsys.hsv_to_rgb(0.333, 0.430, 0.384)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Cleanup l Cleanup t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Cleanup'\npresetIcon = 'DustBust.png'\npresetColor = colorsys.hsv_to_rgb(0.450, 0.44, 0.384)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_ColorCorrection l "Color Correction" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Color Correction'\npresetIcon = 'ColorLookup.png'\npresetColor = colorsys.hsv_to_rgb(0.607, 0.528, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_CG l CG t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'CG'\npresetIcon = 'Shader.png'\npresetColor = colorsys.hsv_to_rgb(0.062, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_Camera l "Camera Setup" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Camera Setup'\npresetIcon = 'Camera.png'\npresetColor = colorsys.hsv_to_rgb(0, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Transformations l Transformations t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Transformations'\npresetIcon = '2D.png'\npresetColor = colorsys.hsv_to_rgb(0.819, 0.286, 0.329)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Elements l Elements t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Elements'\npresetIcon = 'Read.png'\npresetColor = colorsys.hsv_to_rgb(0.125, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_PreviousVersions l "Previous Versions" t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Previous Versions'\npresetIcon = 'Viewer.png'\npresetColor = colorsys.hsv_to_rgb(0.125, 0, 0.3)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_Test l Test t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Test'\npresetIcon = 'ClipTest.png'\npresetColor = colorsys.hsv_to_rgb(0, 0, 0.3)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_LensFlares l "Lens Flares" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Lens Flares'\npresetIcon = 'Flare.png'\npresetColor = colorsys.hsv_to_rgb(0.152, 0.354, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Lights l "Light Setup" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Light Setup'\npresetIcon = 'SpotLight.png'\npresetColor = colorsys.hsv_to_rgb(0.152, 0, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_References l References t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'References'\npresetIcon = 'SideBySide.png'\npresetColor = colorsys.hsv_to_rgb(0.682, 0, 0.298)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_Resources l Resources t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Resources'\npresetIcon = 'Merge.png'\npresetColor = colorsys.hsv_to_rgb(0.682, 0, 0.298)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Despill l Despill t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Despill'\npresetIcon = 'HueCorrect.png'\npresetColor = colorsys.hsv_to_rgb(0.682, 0.528, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_FX l FX t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'FX'\npresetIcon = ':qrc/images/ToolbarFilter.png'\npresetColor = colorsys.hsv_to_rgb(0.812, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_LightWrap l "Light Wrap" t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Light Wrap'\npresetIcon = 'LightWrap.png'\npresetColor = colorsys.hsv_to_rgb(0.91, 0.62, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_ReLight l ReLight t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Relight'\npresetIcon = 'ReLight.png'\npresetColor = colorsys.hsv_to_rgb(0.938, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Bloom l Bloom t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Bloom'\npresetIcon = 'Glint.png'\npresetColor = colorsys.hsv_to_rgb(0.5, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Matte l Matte t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Matte'\npresetIcon = 'Radial.png'\npresetColor = colorsys.hsv_to_rgb(0.5, 1, 0.1)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_EdgeFixes l "Edge Fixes" t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Edge Fixes'\npresetIcon = 'EdgeDetect.png'\npresetColor = colorsys.hsv_to_rgb(0.256, 0.354, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')" +STARTLINE}
 addUserKnob {22 bd_SetExtension l "Set Extension" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Set Extension'\npresetIcon = 'Reformat.png'\npresetColor = colorsys.hsv_to_rgb(0.2, 1, 0.5)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_RigRemoval l "Rig Removal" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Rig Removal'\npresetIcon = 'MarkerRemoval.png'\npresetColor = colorsys.hsv_to_rgb(0, 0.443, 0.38)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Controllers l Controllers t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Controllers'\npresetIcon = 'LevelSet.png'\npresetColor = colorsys.hsv_to_rgb(0.805, 1, 0.3)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_CameraProjection l "Camera Projection" t "Customise the color, label and icon for the selected backdrop nodes" T Blur +STARTLINE}
 addUserKnob {22 bd_StereoFixes l "Stereo Fixes" t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Stereo Fixes'\npresetIcon = 'Anaglyph.png'\npresetColor = colorsys.hsv_to_rgb(0.5, 1, 0.267)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Temp l Temp t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Temp'\npresetIcon = 'CheckerBoard.png'\npresetColor = colorsys.hsv_to_rgb(0, 1, 1)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {22 bd_Output l Output t "Customise the color, label and icon for the selected backdrop nodes" -STARTLINE T "import colorsys\n\n# Backdrop presets\npresetLabel = 'Outputs'\npresetIcon = 'Write.png'\npresetColor = colorsys.hsv_to_rgb(0.167, 1, 0.373)\n\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\nincludeStickyNotes = nuke.thisNode().knob('includeStickyNotes').getValue()\nsep = '\"'\n\n# Float R, G, and B values for the color you're after\nr = presetColor\[0]\ng = presetColor\[1]\nb = presetColor\[2]\nhexColour = int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1), 16)\n\n# StickyNote color\nSNV = 0.85\nrSN = presetColor\[0]*SNV\ngSN = presetColor\[1]*SNV\nbSN = presetColor\[2]*SNV\nhexColourSN = int('%02x%02x%02x%02x' % (rSN*255,gSN*255,bSN*255,1), 16)\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n    nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+presetIcon+sep+'> '+presetLabel)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\nif includeStickyNotes == 1:\n    for i in nuke.selectedNodes('StickyNote'):\n        currentLabel = nuke.toNode(i.name())\['label'].value()\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColourSN)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n        if currentLabel \[0:30] == '<left><img src=\"MetaData.png\">':\n            nuke.toNode(i.name())\['label'].setValue(currentLabel)\n        else:\n            nuke.toNode(i.name())\['label'].setValue('<left><img src=\"MetaData.png\">\\n'+currentLabel)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\n\nif includeDots ==1 and includeStickyNotes == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')\n\nif includeDots == 0 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('StickyNote')) == 0:\n            nuke.message('No Backdrop or StickyNote nodes selected')\n\nif includeDots == 1 and includeStickyNotes == 1:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        if len(nuke.selectedNodes('Dot')) == 0:\n            if len(nuke.selectedNodes('StickyNote')) == 0:\n                nuke.message('No Backdrop, Dot or StickyNote nodes selected')"}
 addUserKnob {26 space_09 l " " T " "}
 addUserKnob {26 customPreset l " " T "Custom Preset:"}
 addUserKnob {1 customBackdropText l label t "Custom label for the selected backdrop nodes"}
 customBackdropText jojojokokponn
 addUserKnob {2 presetIconFile l icon t "Custom icon for the selected backdrop nodes"}
 addUserKnob {41 customBackdropColor l color t "Custom color for the selected backdrop nodes" -STARTLINE T CustomBackdropColor.note_font_color}
 addUserKnob {22 customBackdrop l Apply t "Customise the color, label and icon for the selected backdrop nodes" T "import colorsys\n\n# knobs to variables\nincludeDots = nuke.thisNode().knob('includeDots').getValue()\n\n# knobs to variables\ncustomBackdropIcon = nuke.thisNode().knob('presetIconFile').value()\ncustomBackdropColor = nuke.toNode('CustomBackdropColor').knob('note_font_color').value()\ncustomBackdropText = nuke.thisNode().knob('customBackdropText').value()\nsep='\"'\n\nnuke.root().begin()\nfor i in nuke.selectedNodes('BackdropNode'):\n    nuke.toNode(i.name())\['tile_color'].setValue(customBackdropColor)\n    nuke.toNode(i.name())\['note_font_size'].setValue(30)\n    nuke.toNode(i.name())\['note_font_color'].setValue(0)\n    if customBackdropIcon == '':\n        nuke.toNode(i.name())\['label'].setValue('<center>'+customBackdropText)\n    else:\n        nuke.toNode(i.name())\['label'].setValue('<center><img src='+sep+customBackdropIcon+sep+'> '+customBackdropText)\n\nif includeDots == 1:\n    for i in nuke.selectedNodes('Dot'):\n        nuke.toNode(i.name())\['tile_color'].setValue(hexColour)\n        nuke.toNode(i.name())\['label'].setValue('\\n'+presetLabel)\n        nuke.toNode(i.name())\['note_font_size'].setValue(20)\n        nuke.toNode(i.name())\['note_font_color'].setValue(0)\n\n# Messages\nnuke.root().begin()\nif includeDots == 0:\n    if len(nuke.selectedNodes('BackdropNode')) == 0:\n        nuke.message('No Backdrop nodes selected')\nelse:\n    if len(nuke.selectedNodes('Dot')) == 0:\n        if len(nuke.selectedNodes('BackdropNode')) == 0:\n            nuke.message('No Backdrop or Dot nodes selected')" +STARTLINE}
 addUserKnob {20 endGroup n -1}
}
 NoOp {
  inputs 0
  name LabelProperties
  note_font Verdana
 }
 NoOp {
  name DefaultProperties
 }
 NoOp {
  name CustomBackdropColor
  note_font_color 0xff4c4cff
 }
end_group
