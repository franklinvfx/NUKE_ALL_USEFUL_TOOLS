NoOp {
 name Curve_ReTimer
 help "Curve ReTimer\n\nUsefull Node to retime a curve. \n\n- Copy / Link your curve into \"Original Curve\"\n\n- Choose the retime mode and adjust the option bellow\n\n- Pick the result from the \"Curve Result\""
 knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() in ('RetimeChoice', 'showPanel'):\n    mode = node\['RetimeChoice'].value()\n    if mode == 'Choose':\n        node\['Frm'].setVisible(True)\n        node\['Frm'].setEnabled(False)\n        node\['CurveResult'].setValue(0)\n        node\['CurveResult'].clearAnimated()\n        node\['NodeCtrl'].setVisible(False)\n        node\['Frm'].setLabel('-')\n    elif mode == 'FrameHold':\n        node\['Frm'].setVisible(True)\n        node\['Frm'].setEnabled(True)\n        node\['CurveResult'].setExpression('Crv(Frm)')\n        node\['NodeCtrl'].setVisible(False)\n        node\['Frm'].setLabel('FrameHold')\n    elif mode == 'Set Reference Frame':\n        node\['Frm'].setVisible(True)\n        node\['Frm'].setEnabled(True)\n        node\['NodeCtrl'].setVisible(False)\n        node\['CurveResult'].setExpression('Crv-Crv(Frm)')\n        node\['Frm'].setLabel('Reference Frame')\n    elif mode == 'Time Offset':\n        node\['Frm'].setVisible(True)\n        node\['Frm'].setEnabled(True)\n        node\['NodeCtrl'].setVisible(False)\n        node\['Frm'].setLabel('TimeOffset')\n        node\['CurveResult'].setExpression('Crv(frame-Frm)')\n    elif mode == 'TimeWarp':\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setLabel('TimeWarp')\n        node\['NodeCtrl'].setVisible(True)\n        node\['CurveResult'].setExpression('Crv(\[value NodeCtrl].lookup)')\n    elif mode == 'Oflow':\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setVisible(True)\n        node\['NodeCtrl'].setLabel('Oflow')\n        node\['CurveResult'].setExpression('Crv(\[value NodeCtrl].timing?\[value NodeCtrl].timingFrame:(frame-\[value NodeCtrl].first_frame)*\[value NodeCtrl].timingSpeed+\[value NodeCtrl].first_frame)')\n    elif mode == 'Oflow 2':\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setVisible(True)\n        node\['NodeCtrl'].setLabel('Oflow 2')\n        node\['CurveResult'].setExpression('Crv(\[value NodeCtrl].timing2?\[value NodeCtrl].timingFrame2:(frame-\[value NodeCtrl].first_frame)*\[value NodeCtrl].timingOutputSpeed+\[value NodeCtrl].first_frame)')\n    elif mode == 'Kronos':\n        node\['NodeCtrl'].setLabel('Kronos 2')\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setVisible(True)\n        node\['CurveResult'].setExpression('Crv(\[value NodeCtrl].timing2?\[value NodeCtrl].timingFrame2:(frame-\[value NodeCtrl].first_frame)*\[value NodeCtrl].timingOutputSpeed+\[value NodeCtrl].first_frame)')\n    elif mode == 'Twixtor':\n        node\['NodeCtrl'].setLabel('Twixtor')\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setVisible(True)\n        node\['CurveResult'].setExpression('Crv(\[value NodeCtrl].TimeRetimeMethod?\[value NodeCtrl].Frame:(frame-\[value NodeCtrl].StartFrame)*(\[value NodeCtrl].Speed/100)+\[value NodeCtrl].StartFrame)')\n    elif mode == 'Retime':\n        node\['NodeCtrl'].setLabel('Retime')\n        node\['Frm'].setVisible(False)\n        node\['NodeCtrl'].setVisible(True)\n        node\['CurveResult'].setExpression('Crv((frame-\[value NodeCtrl].output.first)*(\[value NodeCtrl].speed)+\[value NodeCtrl].input.first)')"
 tile_color 0xb0a45dff
 selected true
 icon F_noicon.png
 addUserKnob {20 User l "Curve ReTimer"}
 addUserKnob {7 Crv l "<font color=\"green\">Original Curve" t "Copy the curve you want to retime here." R -500 500}
 addUserKnob {26 ""}
 addUserKnob {4 RetimeChoice l "          Retime Mode" t "Choose one of the Time Mode.\n\nOFlow 2: Nuke v9 and latest." M {Choose "Set Reference Frame" FrameHold "Time Offset" TimeWarp Oflow "Oflow 2" Kronos Twixtor Retime "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {26 S1 l " " T " "}
 addUserKnob {3 Frm l - +DISABLED}
 addUserKnob {1 NodeCtrl l "Oflow 2" t "Enter the name of the OFlow Node." +HIDDEN}
 NodeCtrl "... Name"
 addUserKnob {26 ""}
 addUserKnob {7 CurveResult l "<font color=\"green\">Curve Result" t "Pick the resulting curve from here!" R -500 500}
 addUserKnob {1 name_1 l INVISIBLE +INVISIBLE}
 name_1 " ... "
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[if \{\[value Crv]==\"0\"\} \{return \"\[knob this.name_1 \" ... \"]\"\} \{return \"\[knob this.name_1 \[string map \{\"parent.\" \"\"\} \"\[lrange \[knob Crv] 0 2]\" ]]\"\}]\[value name_1]"
 addUserKnob {26 by1 l " " T " "}
 addUserKnob {26 by2 l " " T "                                                                                               "}
 addUserKnob {26 CGEV l " " t "\nEn cas de probleme, contacter Gaetan Baldy sur le chat\n" -STARTLINE T "<font color=\"#1C1C1C\"> v02 - CGEV - 2016"}
 }
