set cut_paste_input [stack 0]
version 9.0 v6
push $cut_paste_input
Group {
 name Remove_Dynamic
 tile_color 0x9e3b62ff
 selected true
 xpos -17553
 ypos 2394
 addUserKnob {20 dynamic_remove l "Dynamic Remove"}
 addUserKnob {1 _last_node_name l INVISIBLE +INVISIBLE}
 _last_node_name Remove1
 addUserKnob {3 _number_in_gui l INVISIBLE +INVISIBLE}
 _number_in_gui 4
 addUserKnob {1 _last_gui_name l INVISIBLE +INVISIBLE}
 _last_gui_name channels4
 addUserKnob {22 add_button l Add T "# Add button\nself = nuke.thisNode()\nlast_node_name = self\['_last_node_name'].value()\nnum_in_gui = self\['_number_in_gui'].value()\nnum_per_node = 4\nwith self:\n    removes = nuke.allNodes(\"Remove\")\n    num_nodes = len(removes)\n    node = nuke.toNode(last_node_name)\n    knob_space = num_in_gui / float(num_per_node)\n    print knob_space\n    if knob_space >= num_nodes:\n        node = nuke.createNode(\"Remove\", inpanel=False)\n        node\['channels'].setValue(\"None\")\n        node\['operation'].setExpression(r\"\[python -execlocal ret=\\\['remove',\\ 'keep'\\].index(nuke.toNode('Remove1')\\\['operation'\\].value())]\")\n        node.setInput(0, nuke.toNode(last_node_name))\n        nuke.toNode(\"Output1\").setInput(0, node)\n        num_nodes += 1\n\n    used = (int((knob_space -1) * 4) % num_per_node)+1\n    print used, knob_space\n    n = (num_nodes*num_per_node) - (num_per_node-used)\n    print n\n    to_num = \"\"\n    if n-1:\n        to_num = n\n    else:\n        print num_nodes, num_nodes-1, (num_nodes-1)*num_per_node, (num_nodes-1)*num_per_node + 1\n        to_num = (num_nodes-1)*num_per_node + 1\n    from_num = \"\"\n    node_channel_name = \"channels\"\n    bg_name = \"channels\"\n    if n % num_per_node -1:\n        from_num = (n % num_per_node)\n    if not n % num_per_node:\n        from_num = 4\n    k = nuke.Link_Knob(bg_name+str(to_num),  'and' )\n    k.setLink( '%s.%s' % (node.name(), node_channel_name+str(from_num)))\n    self.addKnob(k)\n    self\['_last_node_name'].setValue(node.name())\n    self\['_number_in_gui'].setValue(self\['_number_in_gui'].value()+1)\n    self\['_last_gui_name'].setValue(bg_name+str(to_num))" +STARTLINE}
 addUserKnob {22 remove_button l Remove -STARTLINE T "# Remove button\nself = nuke.thisNode()\nnum_per_node = 4\nlast_node_name = self\['_last_node_name'].value()\nnum_in_gui = self\['_number_in_gui'].value()\nlast_gui_name = self\['_last_gui_name'].value()\nprint int(last_gui_name\[8:])\nif int(last_gui_name\[8:]) <= 3:\n    pass\nelse:\n    with self:\n        removes = nuke.allNodes(\"Remove\")\n        num_nodes = len(removes)\n        node = nuke.toNode(last_node_name)\n        knob_space = num_in_gui / float(num_per_node)\n        print knob_space\n        if knob_space <= (num_nodes-1) + .25:\n            last_node = nuke.toNode(last_node_name)\n            last_node_input = last_node.input(0)\n            self\['_last_node_name'].setValue(last_node_input.name())\n            nuke.delete(last_node)\n\n        link_knob = self.knobs()\[last_gui_name]\n        self.removeKnob(link_knob)\n        del link_knob\n        self\['_number_in_gui'].setValue(num_in_gui-1)\n        self\['_last_gui_name'].setValue(\"channels\" + str(int(last_gui_name\[8:])-1))"}
 addUserKnob {26 ""}
 addUserKnob {41 operation T Remove1.operation}
 addUserKnob {41 channels T Remove1.channels}
 addUserKnob {41 channels2 l and T Remove1.channels2}
 addUserKnob {41 channels3 l and T Remove1.channels3}
 addUserKnob {41 channels4 l and T Remove1.channels4}
}
 Input {
  inputs 0
  name Input
  xpos 212
  ypos -163
 }
 Remove {
  name Remove1
  xpos 212
  ypos -137
 }
 Output {
  name Output1
  xpos 212
  ypos -23
 }
end_group
